* Terminology and conventions for code and documentation

 - Use "duration" when describing how long (in microseconds or seconds) a
   tone will last. Don't use "length" when speaking about how long (in
   microseconds or seconds) a tone will last.

 - Use "sound" when referring to sound devices, sounds systems
   (ALSA/PulseAudio, etc.) or sound outputs (sinks). Don't use "audio" in
   this context.

 - Use "inter-mark-space" when referring to space between Dots and Dashes
   within one character.  Don't use "end-of-mark space".

 - Use "inter-character-space" when referring to space between characters
   within one word. Don't use "end-of-character space".

 - Use "inter-word-space" when referring to space between words. Don't use
   "end-of-word space".

 - Variables of type cw_ret_t, returned by libcw functions, should be called
   "cwret" (or "cwret_<suffix>"). Example:

   cw_ret_t cwret = cw_tq_enqueue_internal(tq, &tone);

 - Variables of type int, returned by ALSA API functions, should be called
   "snd_rv". The "snd" prefix comes from names of ALSA functions and
   highlights the fact that the returned value comes from ALSA (snd)
   API. Example:

   int snd_rv = cw_alsa.snd_pcm_hw_params_set_channels(gen->alsa_data.pcm_handle, hw_params, CW_AUDIO_CHANNELS);
   if (0 != snd_rv) {
           cw_debug_msg (&cw_debug_object, CW_DEBUG_SOUND_SYSTEM, CW_DEBUG_ERROR,
                         MSG_PREFIX "set hw params: can't set number of channels: %s", cw_alsa.snd_strerror(snd_rv));
           return CW_FAILURE;
   }

* Operating systems

** Linux

*** Generic tips
show threads of a process:
ps -p `pidof <process name>`  -T


Emacs tramp mode:
(setq tramp-default-method "ssh")
C-x C-f /remotehost:filename


Get all #defines seen by a compiler
gcc -march=native -dM -E - </dev/null


*** Extra packages to install

mc git
Systems with X windows: xterm meld
Debian: debhelper

*** Alpine Linux

**** Installation

Instructions for installation for dual-boot scenarios:
https://wiki.alpinelinux.org/wiki/Dualbooting

In a nutshell:
 1. Prepare target partition with ext4 file system and with desired size. You
    can do it in another distro, or probably you can do it from Alpine's
    installer.
 2. In Alpine installer, mount the partition to e.g. /mnt.
 3. In Alpine installer, run specified setup-* tools.
 4. In Alpine installer, install Alpine to the partition with 'setup-disk -m
    sys /mnt' command.


**** grub entry

Put this in /etc/grub.d/40_custom and run 'update-grub2':

For Alpine installed on /dev/sda8:
'a' in "sda8" translates to '0' in "hd0,8"
'8' in "sda8" translates to '8' in "hd0,8"

IIRC, UUID was probably obtained with 'blkid /dev/sda8'.

menuentry "Alpine Linux 3.17" {
	set root=(hd0,8)
	insmod ext2
	linux /boot/vmlinuz-lts root=UUID=f9f73a1c-4cc7-4aa2-b952-38735d2d0f61 modules=usb-storage,ext4
	initrd /boot/initramfs-lts
}





** FreeBSD

*** Generic tips

Mount a pendrive
mount -t msdosfs /dev/da0s1 /mnt/

*** Binary packages

https://www.freebsd.org/doc/handbook/pkgng-intro.html

**** Upgrade binary packages:
pkg upgrade

**** Audit installed packages for known vulnerabilities:
pkg audit -F

**** Clean up packages:
pkg autoremove
pkg clean
pkg clean -a

**** List installed packages:
pgk info

**** Remove package
pkg remove


*** Source code packages

https://www.freebsd.org/doc/handbook/ports-using.html#ports-upgrading-tools

**** Install portmaster
cd /usr/ports/ports-mgmt/portmaster
make install clean


**** Upgrade all outdated ports
portmaster -a
or in case of errors:
portmaster -af


*** grub entry

Put this in /etc/grub.d/40_custom and run 'update-grub2':

For FreeBSD installed on /dev/sda9:
'a' in "sda9" translates to '0' in "hd0,9"
'9' in "sda9" translates to '9' "hd0,9"

"\/dev/ada0s9a" - this you probably have to learn during installation of
FreeBSD. IIRC, this was the main slice in which root ('/') and swap
partitions were created by FreeBSD installer.

menuentry "FreeBSD 13.2" --class freebsd --class bsd --class os {
	insmod bsd
	insmod ufs2
	set root=(hd0,9)
	kfreebsd /boot/kernel/kernel
	kfreebsd_loadenv /boot/device.hints
	set kFreeBSD.vfs.root.mountfrom=ufs:/dev/ada0s9a
	set kFreeBSD.vfs.root.mountfrom.options=rw
}



* Sound systems

** Console

*** Linux
modprobe pcspkr
-d /dev/console

*** FreeBSD

kldload speaker
#define LIBCW_CONSOLE_USE_SPKRTONE && make
-d /dev/speaker

**** beep
Text visible after installing 'beep' package on FreeBSD 12.1:

For PC spearker sound to work you need to be in the operator group and need rw/ permissions to /dev/speaker device.

Load kernel module:
kldload speaker

Add a user to operator group:
pw groupmod operator -m jerry

Uncomment the following lines in /etc/devfs.rules file:
# Allow members of group operator to cat things to the speaker
[speaker=10]
add path 'speaker' mode 0660 group operator

To load these new rules add the following to /etc/rc.conf:
devfs_speaker_ruleset="speaker"

Then restart devfs to load the new rules:
/etc/rc.d/devfs restart


** ALSA
"plughw" device

https://alsa.opensrc.org/Proc_asound_documentation
echo 32 > /proc/asound/card0/pcm0p/sub0/prealloc







Use 'lspci' to see if you have a sound card.



Use 'lsmod | grep snd' to see if you have kernel modules for sound loaded.



Use modprobe (e.g. 'modprobe snd_hda_intel') to load appropriate kernel
module if necessary.

Sometimes unloading a module and loading it again helps:
modprobe -r snd_hda_intel
modprobe snd_hda_intel



Check which groups do /dev/snd/* devices belong to, and make sure that your
user belongs to that group.



amixer -c <card no>
amixer -c <card no> set <name (e.g. Master)> unmute



Use 'aplay -l' to list playback devices. Example:
 aplay -l
 **** List of PLAYBACK Hardware Devices ****
 card 0: Intel [HDA Intel], device 0: VT1708B 8-Ch Analog [VT1708B 8-Ch Analog]
   Subdevices: 0/1
   Subdevice #0: subdevice #0
 card 0: Intel [HDA Intel], device 1: VT1708B 8-Ch Digital [VT1708B 8-Ch Digital]
   Subdevices: 1/1
   Subdevice #0: subdevice #0



Use 'alsamixer' to select correct device. Oftentimes the initial device
presented by alsamixer shows only one "slider". The correct device will
present multiple "sliders" for input, output, etc.
Make sure that appropriate items (siders) are not muted (use 'm' key to
toggle).



See if ALSA playback works (you should hear a sound):
   aplay /usr/share/sounds/alsa/<file>
There is also 'paplay' tool for PulseAudio that does the same.



** PulseAudio

*** General comments
PA relies on ALSA.
Make sure that appropriate ALSA packages are installed.
Make sure that ALSA works correctly, refer to ALSA chapter in this file.


*** Useful commands
pamixer --list-sinks
ncpamixer
pactl list cards
pactl list sinks


*** Sinks

List PulseAudio sink names (names that can be passed as values of '-d'
command line switch):

LC_ALL=C pactl list | grep -A2 'Sink #' | grep 'Name: ' | cut -d" " -f2

*** Stop/start

To kill pulseaudio server and prevent it from re-starting:
emacs ~/.config/pulse/client.conf
autospawn = no
pactl exit # (or killall -9 pulseaudio)

To re-start it again:
emacs ~/.config/pulse/client.conf
autospawn = yes
pulseaudio &

*** Valgrind

Testing PulseAudio under valgrind may require setting "VALGRIND=1" env in
command line. See this thread:
https://bugs.freedesktop.org/show_bug.cgi?id=42942


** OSS

*** Ubuntu

When ALSA or PulseAudio is already installed:
apt install oss-compat
apt install osspd

*** FreeBSD

kldload snd_driver
cat /dev/sndstat
./src/cw/cw -d /dev/dsp0.0

* gdb

** Linux
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:`pwd`/src/libcw/.libs
gdb --args ./src/libcw/tests/.libs/libcw_tests -A r -S a

** FreeBSD
setenv LD_LIBRARY_PATH $LD_LIBRARY_PATH:`pwd`/src/libcw/.libs
gdb --args ./src/libcw/tests/.libs/libcw_tests -A r -S a

* Performance

** callgring + kcachegrind

export LD_LIBRARY_PATH="/home/acerion/tmp/unixcw/unixcw/src/libcw/.libs"
valgrind --tool=callgrind   ./src/libcw/tests/.libs/libcw_test_all -A k -S a -N test_straight_key
callgrind_annotate --auto=yes callgrind.out.<PID>
kcachegrind


** perf

http://www.brendangregg.com/perf.html

export LD_LIBRARY_PATH="/home/acerion/tmp/unixcw/unixcw/src/libcw/.libs"
perf record --call-graph dwarf -F 200  -g  ./src/libcw/tests/.libs/libcw_test_all -A k -S a -N test_straight_key
# Show data stored in ./perf.data
perf report --stdio
perf report

* Build system
autoheader
autoreconf -fvi
libtoolize

* Lessons learned

   1. Use the test template that you created in qa/tests.org. It's a
      time saver and a good way to organize tests.
   2. Learn how to muffle the console buzzer. It's really annoying
      during long tests.
   3. CPU usage is important, especially on older/weaker
      machines. Learn how to measure it and monitor it during
      execution of programs and tests.
   4. Lower latency of audio streams leads to higher CPU usage,
      especially for PulseAudio. Find a good way to balance these two
      things.
   5. Set limited and clear goals for each release at the beginning of
      development phase. This will allow you to avoid long development cycles
      and feature creep.
   6. 10GB of disc space for FreeBSD 12.1 is not enough to have comfortable
      working env, as I'm constantly running into "no free space left"
      message. 15GB or even 20GB would be more adequate.
   7. When writing commit messages, try to formulate them in a way that will
      be easy to copy to release notes. When possible, add a summary that
      will be meaningful from user's or integrator's point of view.



* Bugs, feature requests
** TODO R0001 Bug: -lintl on Alpine is not added to linker flags

Compilation of cw on Alpine 1.17.3 is failing because linker can't find intl function:
   /usr/lib/gcc/x86_64-alpine-linux-musl/12.2.1/../../../../x86_64-alpine-linux-musl/bin/ld: /home/acerion/unixcw/unixcw/src/cwutils/i18n.c:63: undefined reference to `libintl_gettext'

Manually adding -lintl to linker's command line fixes the problem, so
it's a matter of getting linker flags on Alpine right.

See 'AC_CHECK_LIB(intl, textdomain)' in configure.ac - we probably already do
something to address this on for FreeBSD.

** TODO R0002 Feature: allow disabling cw and cwgen through ./configure
A problem with -lintl on Alpine shows that even such simple
application as cw can fail to build. To allow a quick workaround for
users, add "--disable-cw" to configure script.

While you are at it, add similar flag for cwgen.

** TODO R0003 Use suseconds_t for duration variables?

** TODO R0004 Detect unusually long times when joining generator's thread

Usually it's 2-5 microseconds, anything longer may be a sign of problems.

** TODO R0005 Module prefixes of equal length

To improve readability of debug messages, all values of MSG_PREFIX (like
"libcw/gen" or "libcw/alsa") should have the same length.

** TODO R0006 Detect missing function definitions
In order to detect libcw function declarations without definitions, write a
code that tries to generate code that calls all libcw public functions. If
definition of any function declared in public header is missing, linking
phase will fail.

Rationale: today I have detected (by sheer luck) that cw_set_debug_flags()
declaration existed in libcw_debug.h, but the function was not defined
anywhere.

** TODO R0007 Don't display unsupported sound systems
Don't show in help texts ("-h") information about sound systems
disabled during compilation. Don't show ALSA/PulseAudio information on
FreeBSD.

** TODO R0008 'Enter' in cw
Just pressing 'Enter' in cw leads to calls of
gen->write_buffer_to_sound_device(). It should not.

** TODO R0009 CPU usage of pulseaudio
Verify cpu usage of "pulseadio" process when "cw" is started and is doing
nothing at all.

** TODO R0010 math library in dependencies

Look at this warning displayed when Debian packages are being built:

dpkg-shlibdeps: warning: package could avoid a useless dependency if debian/cw/usr/bin/cwgen debian/cw/usr/bin/cw were not linked against libm.so.6 (they use none of the library's symbols)
dpkg-shlibdeps: warning: package could avoid a useless dependency if debian/cwcp/usr/bin/cwcp was not linked against libm.so.6 (it uses none of the library's symbols)

** TODO R0011 Space in xcwcp
Double-check if the first character added to text area in xcwcp is a space. If it is, then fix it.
** TODO R0012 Slope duration for tones at highest speeds
For tones at highest speeds the current tone slope duration may be too long,
and the tones may be malformed. The duration may have to be shortened.
** TODO R0013 Correct source of frequency in console code
libcw tests that should generate varying frequency (like
legacy_api_test_cw_queue_tone()) don't generate the varying
frequencies for console sound system. This is probably related to
where cw_console_write_tone_to_sound_device_internal() gets frequency
argument from.

This doesn't have impact on cw/cwcp/xcwcp, but should be fixed
nevertheless.

** TODO R0014 Integrate contents of recent debian/ directory
Use contents of the latest files from debian.org.

** TODO R0015 freedesktop.org menu file

From Debian people:

"
The one change that may be worth including into upstream is the updated
freedesktop.org menu file.  That commit on salsa.debian.org can be viewed
at the link below. [...]
https://salsa.debian.org/debian-hamradio-team/unixcw/-/commit/91a480d31452ba356e1b30ef172fc9cc830053fc
"

** TODO R0016 Add to configure.ac a check for GNU make on build machine

unixcw's Makefiles may not work with non-GNU make on non Linux machines.

** TODO R0017 Add to configure.ac a check for pkg-config

 It is necessary for configuring QT4 application (xcwcp).

** TODO R0018 Make qa_test_configure_flags.sh portable

Some shells (on FreeBSD) don't like the options[] table.

** TODO R0019 Flags for disabling modules

After finalizing split of libcw into modules, add configure flags for
disabling modules (e.g. --disable-libcw-receiver, --disable-libcw-key).

** TODO R0020 pkg-config + ncurses

Check if it's possible to use pkg-config to get ncurses compilation flags.

** TODO R0021 Debian patch for reproducible builds
Integrate this patch:
https://salsa.debian.org/debian-hamradio-team/unixcw/-/blob/master/debian/patches/0004-reprotest_collate_make_fix.patch

** TODO R0022 "level 1" in test_cw_tq_gen_operations_B
Investigate value "1" in this test. Is it valid/acceptable for tests?

[II] Beginning of test
[II]  ---------------------------------------------------------------------
[II] Test name: test_cw_tq_gen_operations_B (1)
[II] Current test topic: tq
[II] Current sound system: PulseAudio
[II] Current sound device: ''
[II]  ---------------------------------------------------------------------
[II] libcw/tests: enqueueing tone (up)                                    [ OK ]
[II] libcw/tests: waiting for level 1 (up)                                [ OK ]
[II] libcw/tests: enqueueing tone (down)                                  [ OK ]
[II] libcw/tests: waiting for level 1 (down)                              [ OK ]
[II] libcw/tests: waiting for level 0 (final)                             [ OK ]
[II] End of test: test_cw_tq_gen_operations_B

** TODO R0023 Receiver errors
[II] libcw/tests: Poll representation                                     [ OK ]
[EE] cw_rec_poll_representation: 1597: libcw/rec: 'global rec': poll: space duration == INT_MAX

[EE] cw_rec_mark_begin: 1001: libcw/rec: 'global rec': mark_begin: receive state not idle and not inter-mark-space: RS_EOC_GAP
cw_start_receive_tone: Numerical result out of range
[II] Polled inter-word-space
[II] libcw/tests: Polling inter-word-space                                [ OK ]
[EE] cw_rec_mark_end: 1070: libcw/rec: 'global rec': mark_end: receiver state not RS_MARK: RS_IDLE
[II] Polled character 'U'

** TODO R0024 Each failed test should be logged to file
Having the failed tests logged to a file will make it easier to track
problems and come back to them later. Right now all we have is a long,
long log of tests (where both successful and failed tests are printed)
and a test summary table. The full log is too long, and the summary
table is not detailed enough.

The separate log file with only failed tests (full logs of failed
tests) would be a useful middle ground.

This would require buffering of a test in memory and dumping it to
file on errors.
** TODO R0025 Count ALSA errors in tests framework:
 + write: writei: Input/output error / -5
 + underruns
 + other
This will require propagating them from libcw's ALSA module up to test
framework, but it would help a lot in registering and tracking problems.

** TODO R0026 Print summary table also to disc file
It will be easier to copy/paste test results on non-X systems from a
disc file to qa/tests.org.
** TODO R0027 Track failing tests
Learn how to recognize which functions fail, learn how to count their
failures and track them over time and over OSes. Perhaps each test should
have its unique id that would be preserved even if a test function was
renamed or split.
** TODO R0028 Short first element in test_cw_gen_state_callback

On Alpine/N150 the first recorded element in test_cw_gen_state_callback has
shorter duration. This may be occurring on other machines too.

[II] Beginning of test
[II]  ---------------------------------------------------------------------
[II] Test name: test_cw_gen_state_callback
[II] Current test topic: gen
[II] Current sound system: ALSA
[II] Current sound device: ''
[II]  ---------------------------------------------------------------------
[II] dot duration  = 300000 us
[II] dash duration = 900000 us
[II] eoe duration  = 300000 us
[II] ics duration  = 600000 us
[II] iws duration  = 1500000 us
[II] additional duration =      0 us
[II] adjustment duration =      0 us
[II] speed = 4 WPM
[II] Call   1, state 0, representation = '^', duration of previous element = 813530 us  <---- Here, noticeably shorter than 896056 or 896076 or 917133 below.
[II] Call   2, state 1, representation = '-', duration of previous element = 298656 us
[II] Call   3, state 0, representation = '^', duration of previous element = 896056 us
[II] Call   4, state 1, representation = '-', duration of previous element = 298629 us
[II] Call   5, state 0, representation = '^', duration of previous element = 896076 us
[II] Call   6, state 1, representation = '-', duration of previous element = 917133 us
[II] Call   7, state 0, representation = '^', duration of previous element = 896001 us
[II] Call   8, state 1, representation = '-', duration of previous element = 298677 us
[II] Call   9, state 0, representation = '^', duration of previous element = 896039 us
[II] Call  10, state 1, representation = '-', duration of previous element = 298646 us
[II] Call  11, state 0, representation = '^', duration of previous element = 896103 us

** TODO R0029 Add code checkers tests
Add "run clang-tidy and cppcheck" for each platform and each package to
qa/tests.org.

** TODO R0030 Fix long duration of valgrind tests
When libcw tests binary is executed under valgrind, its execution
takes a lot of time because the tests call vsnprintf() a lot
(indirectly through snprintf() and vsnprintf()). We can really shorten
the duration of tests if only we will find a way to decrease usage of
these functions.
** TODO R0031 Implement a fully automatic testing of cwgen's output
Pass to cwgen all combinations of command line args, and examine if
cwgen's output is generating what is requested. Also check randomness
of output.
** TODO R0032 Test of installation and usage of library
Add following test to tests of unixcw:
1. Compile the install unixcw:
./configure --prefix=$HOME && make && make install
2. Compile cwdaemon using libcw headers and library installed in
   $HOME.
PKG_CONFIG_PATH=$HOME/lib/pkgconfig/ ./configure && make
3. Run cwdaemon using libcw library installed in $HOME.
LD_LIBRARY_PATH+=$LD_LIBRARY_PATH:$HOME/lib ./src/cwdaemon -x p -n
./examples/example.sh
** TODO R0033 Add 'build Debian package' test
Add "run 'build Debian package' test" to list of tests in qa/tests.org.
** TODO R0034 Add qa/ script for reproducible Debian builds
https://manpages.debian.org/buster/reprotest/reprotest.1.en.html
** TODO R0035 Feature: remove cw_assert() from libcw

Replace it with dev debug message that is compiled only in dev builds.
** TODO R0036 Feature: run tests with dev features enabled
There are sections of code that are enabled only in dev builds: e.g. some
additional checks and safeguards. The unit/integration code must have a
chance at triggering these checks and safeguards.
** TODO R0037 Feature: non-hardcoded package version number

Right now the package number (e.g. 3.6.0) is explicitly given in many places
in the package. Come up with a way to at least decrease the count of places
where the number is hardcoded - use some #define or something like this.
** TODO R0038 Feature: changelogs in Debian packages
Debian packages contain changelog files that describe user-facing changes.
The files are somehow taken from unixcw package, but are now outdated. Do
something to make them up-to-date.

Example file: cwcp_3.6.1-1_amd64.deb/CONTENTS/usr/share/doc/cwcp/changelog.gz
** TODO R0039 'warn unused return value'

During building of Debian packages I noticed a compiler warning saying that
return value of write() was not checked ('Wunused-return' or something like
this). Why this issue was not found earlier? Am I missing some compiler
warning in my flags?
