#+TODO: TODO STARTED | FAILED DONE SKIPPED
# The vertical bar indicates which states are final states.

* STARTED Tests for unixcw version 3.6.1
Version of template: 2023.06.10.
** DONE Main laptop, Debian GNU/Linux 12
gcc (Debian 12.2.0-14) 12.2.0
*** DONE Build system tests
**** DONE make distcheck
*Steps*
Run "make distcheck" in main directory of the project.

*Expected result*
1. Distribution package is built correctly (no errors during creation of
   archive).
2. Automatic tests executed during 'make distcheck' pass.
3. The distribution package contains all files intended for distribution (use
   your best judgement here).

*Actual result*
All three points are a PASS

**** DONE ./configure options

Test that all options supported by ./configure script produce "buildable" code.

*Steps*
Run ./qa/test_configure_options.sh

*Expected result*

The script should not report any failure.

Example of failed test:

$ qa/test_configure_options.sh
128: ./configure --enable-dev --disable-xcwcp --disable-cwcp --disable-pulseaudio --disable-alsa --disable-oss --disable-console &>/dev/null && make &>/dev/null && make check &>/dev/null && make clean &>/dev/null
Test of configuration flags FAILED
$ echo $?
255

Example of successful test:

$ qa/test_configure_options.sh
128: ./configure --enable-dev --disable-xcwcp --disable-cwcp --disable-pulseaudio --disable-alsa --disable-oss --disable-console &>/dev/null && make &>/dev/null && make check &>/dev/null && make clean &>/dev/null
127: ./configure --enable-dev --disable-xcwcp --disable-cwcp --disable-pulseaudio --disable-alsa --disable-oss &>/dev/null && make &>/dev/null && make check &>/dev/null && make clean &>/dev/null
126: ./configure --enable-dev --disable-xcwcp --disable-cwcp --disable-pulseaudio --disable-alsa --disable-console &>/dev/null && make &>/dev/null && make check &>/dev/null && make clean &>/dev/null
[...]
3: ./configure --disable-oss &>/dev/null && make &>/dev/null && make check &>/dev/null && make clean &>/dev/null
2: ./configure --disable-console &>/dev/null && make &>/dev/null && make check &>/dev/null && make clean &>/dev/null
1: ./configure &>/dev/null && make &>/dev/null && make check &>/dev/null && make clean &>/dev/null
Test of configuration flags SUCCEEDED

*Notes*
The shell script may not work on systems without bash.

*Actual result*
PASS, no issues found (512 compilations).

*** DONE libcw tests
Tests using tools from unixcw/src/libcw.

Notice that Null sound system is tested as last one: first run tests on other
sound systems that allow you to hear some sound. With a real sound from
speaker or buzzer it's easier to notice problems with libcw. Don't waste time
on testing Null system first, only to hear issues with other sound systems
later.

**** SKIPPED Main test binary - Console sound system

*Steps*
cd src/libcw/tests
./libcw_tests -S c

*Expected results*
Test logs and summary table for tests shows only well-known problems.

*Test statistics table*

*Actual result*
Skipped. Console output is not available on this machine

**** SKIPPED Main test binary - OSS sound system

*Steps*
cd src/libcw/tests
./libcw_tests -S o

*Expected results*
Test logs and summary table for tests shows only well-known problems.

*Test statistics table*

*Actual result*
Skipped. Console output is not available on this machine

**** DONE Main test binary - ALSA sound system

*Steps*
cd src/libcw/tests
./libcw_tests -S a

*Expected results*
Test logs and summary table for tests shows only well-known problems.

*Test statistics table*

libcw tests: Statistics of tests (failures/total)

     | tone queue| generator |    key    |  receiver |    data   |    other  |
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   N |           |           |           |           |           |           |  
   N |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   C |           |           |           |           |           |           |  
   C |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   O |           |           |           |           |           |           |  
   O |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
-> A |         0 |        11 |         0 |         0 |         0 |         0 |<-
   A |       151 |      1003 |        48 |      1426 |        30 |       431 |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   P |           |           |           |           |           |           |  
   P |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
Duration of tests = 24 minutes, 54 seconds

*Actual result*

Pass. The failures occurred in 'test_cw_gen_state_callback' test, which is a
known problem.

**** DONE Main test binary - PulseAudio sound system

*Steps*
cd src/libcw/tests
./libcw_tests -S p

*Expected results*
Test logs and summary table for tests shows only well-known problems.

*Test statistics table*

     | tone queue| generator |    key    |  receiver |    data   |    other  |
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   N |           |           |           |           |           |           |  
   N |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   C |           |           |           |           |           |           |  
   C |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   O |           |           |           |           |           |           |  
   O |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   A |           |           |           |           |           |           |  
   A |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
-> P |         0 |        38 |         0 |         0 |         0 |         0 |<-
   P |       151 |      1003 |        48 |      1426 |        30 |       431 |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+

*Actual result*

Pass. The failures occurred in 'test_cw_gen_state_callback' test, which is a
known problem.

**** DONE Main test binary - Null sound system

*Steps*
cd src/libcw/tests
./libcw_tests -S n

*Expected results*

Test logs and summary table for tests shows only well-known problems.

*Test statistics table*
libcw tests: Statistics of tests (failures/total)

     | tone queue| generator |    key    |  receiver |    data   |    other  |
   --+-----------+-----------+-----------+-----------+-----------+-----------+
-> N |         0 |        34 |         0 |         0 |         0 |         0 |<-
   N |       151 |      1003 |        48 |      1426 |        30 |       431 |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   C |           |           |           |           |           |           |  
   C |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   O |           |           |           |           |           |           |  
   O |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   A |           |           |           |           |           |           |  
   A |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   P |           |           |           |           |           |           |  
   P |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
Duration of tests = 24 minutes, 57 seconds

*Actual result*

Pass. The failures occurred in 'test_cw_gen_state_callback' test, which is a
known problem.

**** DONE Misc tests

***** DONE pcm sample file is disabled in regular builds

Confirm that by default libcw doesn't create a debug file into which raw PCM
samples are being written.

*Steps*

1. Confirm that in /tmp there is no file called
   "cw_file_<parameters>_pcm.raw" from previous runs of programs/tests.

2. Build package
./configure && make

3. Start a program that uses libcw to generate sound. Play any string.
./src/cw/cw

4. Exit the program.

5. Confirm that in /tmp there is no file called
   "cw_file_<parameters>_pcm.raw" from _current_ run of program done in
   step 3.

*Actual result*
Pass. Tested with cw, cwcp and xcwcp. There are no sample files in /tmp.

*** DONE cw tests
Tests of basic usage of unixcw/src/cw/cw program.

**** DONE Tests using *.cw files

Tests that use *.cw files:
./src/cw/cw -f src/cw/test.cw
./src/cw/cw -f src/cw/demo.cw
./src/cw/cw -f src/cw/prelude.cw

*Actual result*
Pass: all files were played correctly, without noticeable errors.

**** DONE Tests of command-line options
Test that some of command-line options result in expected behaviour of cw.

***** DONE words per minute
./src/cw/cw -w 10
./src/cw/cw -w 50

*Actual result*
PASS: speed changes.

***** DONE tone (frequency)

./src/cw/cw -t 300
./src/cw/cw -t 3000

*Actual result*
PASS: frequency changes.

***** DONE volume

./src/cw/cw -v 30
./src/cw/cw -v 90

*Actual result*
PASS: volume changes.

***** DONE gap

./src/cw/cw -g 0
./src/cw/cw -g 40

*Actual result*
PASS: gap varies.

***** DONE weighting

./src/cw/cw -k 30
./src/cw/cw -k 70

*Actual result*
PASS: weighting varies.

***** DONE Null sound system

./srcw/cw/cw -s n

*Actual result*
PASS: No sound is produced, but cw appears to be functioning correctly.

***** DONE ALSA sound system

You may want to first kill pulseaudio and pipewire

./src/cw/cw -s a -d plughw:CARD=PCH,DEV=0

*Actual result*
PASS: Sound is produced as expected.

***** SKIPPED OSS sound system

You may want to first kill pulseaudio and pipewire

./src/cw/cw -s o

*Actual result*
SKIP: OSS is not available on this machine.

*** DONE cwcp tests
Tests of basic usage of unixcw/src/cwcp/cwcp program.

**** DONE Tests of UI elements
***** DONE Main modes (character groups)

*Steps*
1. Select each mode (character group) item in left-hand "Modes" panel.
2. Press F9 or Enter if necessary to force start of playing.

*Expected results*
1. For each item the text in main UI area corresponds to each mode (character
   group). The words consist of intended (expected) characters from character group.
2. For each item the text is being played correctly.

*Actual results*
Both points from "expected results" are satisfied.

***** DONE "Keyboard" mode

*Steps*
1. In the left-hand "Modes" panel select "Keyboard" item.
2. Enter few words

*Expected results*
1. The entered words are visible in main UI area.
2. The words are played correctly.

*Actual results*
Both points from "expected results" are satisfied.

***** DONE Main Function-key controls

*Steps*
1. In "Mode" menu select any of character groups.
2. Let cwcp generate sound.
3. Use the function keys in range F1-F8 to control parameters of played
   sound.

*Expected results*
Parameters of newly enqueued text (speed, tone, volume, gap) behave
corresponding to a value modified through the Function keys.

*Actual results*
Parameters of sound can be controlled by the Function keys.

***** DONE Practice time keys (PageDown/PageUp keys)

*Steps*
1. Using PageDown/PageUp keys select some value of practice time.
2. In "Mode" menu select any of character groups.
3. Let cwcp generate sound.


*Expected results*
1. The timer at the bottom of the UI counts practice time up.
2. When the count of minutes of practice time reaches limit set with
   PageDown/PageUp keys, the practice ends.


*Actual results*
Both points from "Expected results" are satisfied.

***** DONE "Exit" key

*Steps*
1. Press F12 ("Exit") key when cwcp is idle and is not generating any text/sound.
2. Press F12 ("Exit") key when cwcp is generating text and sound.

*Expected results*
1. cwcp process is terminated.
2. No "ncurses" artifacts are visible in console window, meaning that the
   termination was "clean".
3. No error or warning messages are visible in console window

*Actual results*
All three points from "Expected results" are satisfied.

*** DONE xcwcp tests
**** DONE Tests of UI elements
***** DONE Main modes (character groups)

*Steps*
1. Select each mode (character group) item in "Modes" dropdown menu.
2. Press Play button if necessary to force start of playing.

*Expected results*
1. For each item the text in main UI area corresponds to each mode (character
   group). The words consist of intended (expected) characters from character group.
2. For each item the text is being played correctly.

*Actual results*
Both points from "expected results" are satisfied.

***** DONE "Keyboard" mode

*Steps*
1. In the "Modes" dropdown select "Send Keyboard CW" item.
2. Enter few words.
3. Press Play button if necessary to force start of playing.

*Expected results*
1. The entered words are visible in main UI area.
2. The words are played correctly.

*Actual results*
Both points from "expected results" are satisfied.

***** DONE "Receiver" mode
*Steps*
1. In the "Modes" dropdown select "Receive Keyed CW" item.
2. Use mouse or keyboard to simulate Morse key:
   a. Use mouse Left/Right button to simulate iambic keyer.
   b. Use keyboard Left/Right key to simulate iambic keyer.
   c. Use keyboard Space key to simulate straight key.
   d. Use keyboard Enter key to simulate straight key.

*Expected results*
For each method of simulating a key, the tested program is able to recognize
keyed characters.

*Actual results*
The expected results are more or less satisfied.

***** DONE Main sound controls

*Steps*
1. In program's "Modes" dropdown select any of character groups.
2. Let xcwcp generate sound.
3. Use the spin boxes available in program's toolbar to control parameters of played
   sound (speed, tone, volume, gap)..

*Expected results*
Parameters of newly enqueued text (speed, tone, volume, gap) behave
corresponding to a value modified through the spin boxes.

*Actual results*
Parameters of sound can be controlled by the spin boxes.

*** DONE cwgen tests
Tests of basic usage of unixcw/src/cwgen/cwgen program.

**** DONE Manual tests of cwgen

A significant part of cwgen's functionality is tested automatically through
code in 'src/cwgen/tests' subdirectory. This means that the manual tests
described here are only meant as a double-check that the automatic tests
didn't miss any grave problems.

The test steps mention "visual inspection". This means: look at cwgen's
output, see if it more or less matches command line options passed to cwgen,
and move on to next step.

*Steps*

1. Visually inspect count of groups (words) in output of
   ./src/cwgen/cwgen -g 9

2. Visually inspect size of groups (words) in output of
   ./src/cwgen/cwgen --groupsize 3

3. Visually inspect size of groups (words) in output of
   ./src/cwgen/cwgen --groupsize 2-7

4. Visually inspect count of repeats, i.e. number of times a given word has
   been *additionally* printed after first printing of a word:
   ./src/cwgen/cwgen -r 2

5. Visually inspect characters used in groups (words) in output of
   ./src/cwgen/cwgen --charset "aBc0"

6. Visually inspect count of characters in output of
   ./src/cwgen/cwgen --limit 12

7. Visually inspect cwgen's help text in output of
   ./src/cwgen/cwgen -h

8. Visually inspect copyright notice in output of
   ./src/cwgen/cwgen -v


*Expected results*

In each of the above steps, the text printed to console matches the command
line options passed to cwgen.

*Actual results*

The actual results match the expected results.

**** DONE Automatic tests of cwgen

Automatic tests are executed on every "make check", which happens a lot
during development. This test from this test scenario is meant to
manually/visually check the output of the tests.

*Steps*
1. Compile automatic tests with this command:
   ./configure && make && make check
2. Execute manually the binary responsible for automatic tests of cwgen.
   ./src/cwgen/tests/cwgen_args

   a. Run the binary 5 times.
   b. Each time check whether the binary didn't report errors.
   c. Each time look at debug showing argv, i.e. the list of cwgen's command
      line options. Compare the output of tests with the list of the options.


*Expected results*
1. The test binary doesn't report errors (warnings are allowed).
2. Debugs generated by the test binary match the list of cwgen's command line
   options.

*Actual results*
Both points from expected results are satisfied.

*** DONE receiving functionality
**** DONE xcwcp receiver tests

*Steps*
1. Enable xcwcp's receiver tests
  ./configure --enable-dev-receiver-test
2. Compile xcwcp
   make
3. Run xcwcp, use "Run Receiver Test" item in modes menu
   Observe console during and after execution of the test.
4. At the end of received text press "pause" button to end the test.
5. Check in console that the summary says "success":
   "[II] Test result: success"

*Expected results*
1. No errors reported in console.
2. Test's summary indicates success.

*Actual results*
Expected results are satisfied.

** DONE Alpine 3.18.4 (Celeron, x86_64)
kernel 6.1.59-0-lts
musl-1.2.4-r2
gcc (Alpine 12.2.1_git20220924-r10) 12.2.1 20220924
*** DONE Build system tests
**** DONE make distcheck

*Steps*
Run "make distcheck" in main directory of the project.

*Expected result*
1. Distribution package is built correctly (no errors during creation of
   archive).
2. Automatic tests executed during 'make distcheck' pass.
3. The distribution package contains all files intended for distribution (use
   your best judgement here).

*Actual result*

Pass. The archive is being built correctly, distcheck tests pass.

There are few autotools warnings when build system files are being
re-generated (see below), but this is not a major issue - it can be addressed
in later releases.

configure.ac:46: warning: The macro `AC_PROG_LIBTOOL' is obsolete.
configure.ac:46: You should run autoupdate.
m4/libtool.m4:99: AC_PROG_LIBTOOL is expanded from...
configure.ac:46: the top level
configure.ac:536: warning: The macro `AC_HEADER_STDC' is obsolete.
configure.ac:536: You should run autoupdate.
./lib/autoconf/headers.m4:704: AC_HEADER_STDC is expanded from...
configure.ac:536: the top level
configure.ac:538: warning: The macro `AC_HEADER_TIME' is obsolete.
configure.ac:538: You should run autoupdate.
./lib/autoconf/headers.m4:743: AC_HEADER_TIME is expanded from...
configure.ac:538: the top level

**** DONE ./configure options

Test that all options supported by ./configure script produce "buildable" code.

*Steps*
Run ./qa/test_configure_options.sh

*Expected result*

The script should not report any failure.

Example of failed test:

$ qa/test_configure_options.sh
128: ./configure --enable-dev --disable-xcwcp --disable-cwcp --disable-pulseaudio --disable-alsa --disable-oss --disable-console &>/dev/null && make &>/dev/null && make check &>/dev/null && make clean &>/dev/null
Test of configuration flags FAILED
$ echo $?
255

Example of successful test:

$ qa/test_configure_options.sh
128: ./configure --enable-dev --disable-xcwcp --disable-cwcp --disable-pulseaudio --disable-alsa --disable-oss --disable-console &>/dev/null && make &>/dev/null && make check &>/dev/null && make clean &>/dev/null
127: ./configure --enable-dev --disable-xcwcp --disable-cwcp --disable-pulseaudio --disable-alsa --disable-oss &>/dev/null && make &>/dev/null && make check &>/dev/null && make clean &>/dev/null
126: ./configure --enable-dev --disable-xcwcp --disable-cwcp --disable-pulseaudio --disable-alsa --disable-console &>/dev/null && make &>/dev/null && make check &>/dev/null && make clean &>/dev/null
[...]
3: ./configure --disable-oss &>/dev/null && make &>/dev/null && make check &>/dev/null && make clean &>/dev/null
2: ./configure --disable-console &>/dev/null && make &>/dev/null && make check &>/dev/null && make clean &>/dev/null
1: ./configure &>/dev/null && make &>/dev/null && make check &>/dev/null && make clean &>/dev/null
Test of configuration flags SUCCEEDED

*Notes*
The shell script may not work on systems without bash.

*Actual result*

Pass. No compilation errors were found (with the limited count of options).

Tests on this machine were done with limited count of options. This is a
relatively weak machine so I wanted to run this test in reasonable time.

Since this platform does not allow me compilation with xcwpc, this option is
not included.

Dev options are also removed because this platform is not a main development
platform for me.

So this is the set of tested options:

let total_options_count=7
all_options[0]="--disable-console"
all_options[1]="--disable-oss"
all_options[2]="--disable-alsa"
all_options[3]="--disable-pulseaudio"
all_options[4]="--disable-cwgen"
all_options[5]="--disable-cw"
all_options[6]="--disable-cwcp"

*** DONE libcw tests
Tests using tools from unixcw/src/libcw.

Notice that Null sound system is tested as last one: first run tests on other
sound systems that allow you to hear some sound. With a real sound from
speaker or buzzer it's easier to notice problems with libcw. Don't waste time
on testing Null system first, only to hear issues with other sound systems
later.

**** DONE Main test binary - Console sound system

*Steps*
cd src/libcw/tests
./libcw_tests -S c

*Expected results*
Test logs and summary table for tests shows only well-known problems.

*Test statistics table*
     | tone queue| generator |    key    |  receiver |    data   |    other  |
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   N |           |           |           |           |           |           |  
   N |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
-> C |         0 |        42 |         0 |         0 |         0 |         0 |<-
   C |       151 |       999 |        48 |      1426 |        30 |       431 |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   O |           |           |           |           |           |           |  
   O |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   A |           |           |           |           |           |           |  
   A |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   P |           |           |           |           |           |           |  
   P |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
Duration of tests = 24 minutes, 55 seconds


*Actual result*

Pass. The failures come as usual from test_cw_gen_state_callback(). I have
checked the divergences between expected result and actual result and the
divergences are still acceptable.

**** SKIPPED Main test binary - OSS sound system

*Preconditions*

On Linux machine you may need to disable PulseAudio and/or PipeWire sound
server before being able to access OSS directly. Refer to instructions in
project's README.dev.org for details on how to stop these sound servers.

*Steps*
cd src/libcw/tests
./libcw_tests -S o

*Expected results*
Test logs and summary table for tests shows only well-known problems.

*Test statistics table*

*Actual result*

Skipped: this machine doesn't support direct OSS. Perhaps I could force ALSA
to emulate OSS, but what's the point...

**** DONE Main test binary - ALSA sound system

*Preconditions*

On Linux machine you may need to disable PulseAudio and/or PipeWire sound
server before being able to access ALSA directly. Refer to instructions in
project's README.dev.org for details on how to stop these sound servers.

*Steps*
cd src/libcw/tests
./libcw_tests -S a

*Expected results*
Test logs and summary table for tests shows only well-known problems.

*Test statistics table*

libcw tests: Statistics of tests (failures/total)

     | tone queue| generator |    key    |  receiver |    data   |    other  |
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   N |           |           |           |           |           |           |  
   N |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   C |           |           |           |           |           |           |  
   C |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   O |           |           |           |           |           |           |  
   O |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
-> A |         0 |        34 |         0 |         0 |         0 |         0 |<-
   A |       151 |      1003 |        48 |      1426 |        30 |       431 |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   P |           |           |           |           |           |           |  
   P |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
Duration of tests = 25 minutes, 3 seconds

*Actual result*

Pass.

Three functions have failed:

 - test_cw_gen_state_callback() - the usual problems with generator's callback.
   One thing worth noticing is the high divergence for first element:

   [INFO ] speed               = 4 WPM
   [INFO ] Element   1, state 0, type = 'M'; previous element: duration =    812692.00 us, divergence =   -9.701%        <---- over 9%

 - test_cw_gen_remove_last_character()

   First element of first character is not recognized correctly, most
   probably because of problems with generator's callback. I have observed
   PCM file with samples and all elements of the first characters have
   correct durations, so the generator generates correct samples, but calls
   the callback incorrectly. This is in line with the results in the test
   above.

   [II] You will now hear 'oooo' followed by 4 's' characters
   [EE] cw_rec_identify_mark_internal: 1264: libcw/rec: '': identify: unrecognized mark, duration = 217337 [us]
   [EE] cw_rec_identify_mark_internal: 1266: libcw/rec: '': identify: dot limits: 50000 - 150000 [us]
   [EE] cw_rec_identify_mark_internal: 1268: libcw/rec: '': identify: dash limits: 250000 - 350000 [us]
   [EE] cw_rec_identify_mark_internal: 1278: libcw/rec: '': identify: unrecognized mark in non-adaptive receive
   [DD] received character 'M'
   [DD] received character 'O'
   [DD] received character 'O'
   [DD] received character 'O'
   [DD] received character 'S'
   [DD] received character 'S'
   [DD] received character 'S'
   [DD] received character 'S'
   [DD] received character ' '
   [EE] libcw/tests: Removal of last 0 character(s)                 [FAIL]
   [EE]    ***   expected [oooossss ], got [MOOOSSSS ]   ***

 - test_cw_gen_enqueue_character_no_ics()

   For some reasons easy rec can't recognize some characters. Most probably
   because of problems with generator's callback (see previous two failed
   tests).


Because the problems didn't appear on this machine with PulseAudio sound
system, and because they didn't appear on my main laptop wheh using ALSA, and
because the two last problems probably existed in previous releases too (but
weren't discovered because of lack of good tests), then I'm deciding to mark
this test as PASS.

**** DONE Main test binary - PulseAudio sound system

*Steps*
cd src/libcw/tests
./libcw_tests -S p

*Expected results*
Test logs and summary table for tests shows only well-known problems.

*Test statistics table*

libcw tests: Statistics of tests (failures/total)

     | tone queue| generator |    key    |  receiver |    data   |    other  |
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   N |           |           |           |           |           |           |  
   N |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   C |           |           |           |           |           |           |  
   C |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   O |           |           |           |           |           |           |  
   O |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   A |           |           |           |           |           |           |  
   A |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
-> P |         0 |        18 |         0 |         0 |         0 |         0 |<-
   P |       151 |      1003 |        48 |      1426 |        30 |       431 |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
Duration of tests = 25 minutes, 6 seconds

*Actual result*

Pass. The failures come from a test of generator that is known to be
sometimes failing (the test with timings of generator callback).

**** DONE Main test binary - Null sound system

*Steps*
cd src/libcw/tests
./libcw_tests -S n

*Expected results*

Test logs and summary table for tests shows only well-known problems.

*Test statistics table*

libcw tests: Statistics of tests (failures/total)

     | tone queue| generator |    key    |  receiver |    data   |    other  |
   --+-----------+-----------+-----------+-----------+-----------+-----------+
-> N |         0 |        14 |         0 |         0 |         0 |         0 |<-
   N |       151 |       999 |        48 |      1426 |        30 |       431 |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   C |           |           |           |           |           |           |  
   C |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   O |           |           |           |           |           |           |  
   O |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   A |           |           |           |           |           |           |  
   A |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   P |           |           |           |           |           |           |  
   P |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
Duration of tests = 24 minutes, 55 seconds

*Actual result*

Pass.

As usual, the test_cw_gen_state_callback() test is failing, but the
divergences from expected results aren't high.

**** DONE Misc tests

***** TODO pcm sample file is disabled in regular builds

Confirm that by default libcw doesn't create a debug file into which raw PCM
samples are being written.

*Steps*

1. Confirm that in /tmp there is no file called
   "cw_file_<parameters>_pcm.raw" from previous runs of programs/tests.

2. Build package
./configure && make

3. Start a program that uses libcw to generate sound. Play any string.
./src/cw/cw

4. Exit the program.

5. Confirm that in /tmp there is no file called
   "cw_file_<parameters>_pcm.raw" from _current_ run of program done in
   step 3.

*Actual result*

*** DONE cw tests
Tests of basic usage of unixcw/src/cw/cw program.

**** DONE Tests using *.cw files

Tests that use *.cw files:
./src/cw/cw -f src/cw/test.cw           #  4 min 58 sec
./src/cw/cw -f src/cw/demo.cw           #  9 min 54 sec
./src/cw/cw -f src/cw/prelude.cw        #  1 min 54 sec

*Actual result*
Pass. All tests were played correctly.

**** DONE Tests of command-line options
Test that some of command-line options result in expected behaviour of cw.

***** DONE basic options through script

*Prerequisites*
1. Adjust parameters of ./src/cw/tests/basic_options.sh as needed on given
   platform, e.g. change value of $DEVICE.

*Steps*
1. Run script: ./src/cw/tests/basic_options.sh
2. Obseve text info informing about tested options, listen to played sounds,
3. Confirm that sound's parameters (volume, gap, tone, etc.) matches the info
   printed by the script.
4. Observe whether entire text (especially its beginning and end) is played
   correctly.

*Actual result*
Pass. All options have expected result on sound output.

***** DONE Null sound system

./srcw/cw/cw -s n

*Actual result*
PASS: No sound is produced, but cw appears to be functioning correctly.

***** DONE ALSA sound system

You may want to first kill pulseaudio and pipewire

./src/cw/cw -s a -d plughw:CARD=PCH,DEV=0

*Actual result*
PASS: Sound is produced correctly. I needed to uninstall pulseaudio to get ALSA to work.

***** SKIPPED OSS sound system

You may want to first kill pulseaudio and pipewire

./src/cw/cw -s o

*Actual result*
Skipped. I can't get OSS working on this machine.

**** DONE basic behaviour in a "session"

One of previous tests ("through script") has been passing text to cw through
unix pipe. If I remember correctly, such setup may behave a bit differently
than a setup in which a text is entered through keyboard in a started cw
program (started cw program waits for input from user, so called "session").

In one of such setups, in some circumstances, the initial part of text was
not played correctly.

In order to verify behaviour of cw in a "session", run this test.

TODO acerion 2023.11.10: check what was the problem and in which specific
circumstances it occurred.

*Steps*
1. Start cw: ./src/cw/cw
2. Enter any text
3. Observe whether entire text (especially its beginning and end) is played
   correctly

*Actual result*
Pass. The text is being played correctly during session.

*** DONE cwcp tests
Tests of basic usage of unixcw/src/cwcp/cwcp program.

**** DONE Tests of UI elements
***** DONE Main modes (character groups)

*Steps*
1. Select each mode (character group) item in left-hand "Modes" panel.
2. Press F9 or Enter if necessary to force start of playing.

*Expected results*
1. For each item the text in main UI area corresponds to each mode (character
   group). The words consist of intended (expected) characters from character group.
2. For each item the text is being played correctly.

*Actual results*
Pass. For each character group the words are formed and played correctly.

***** DONE "Keyboard" mode

*Steps*
1. In the left-hand "Modes" panel select "Keyboard" item.
2. Enter few words

*Expected results*
1. The entered words are visible in main UI area.
2. The words are played correctly.

*Actual results*
Pass. Entered words are played correctly.

***** DONE Main Function-key controls

*Steps*
1. In "Mode" menu select any of character groups.
2. Let cwcp generate sound.
3. Use the function keys in range F1-F8 to control parameters of played
   sound.

*Expected results*
Parameters of newly enqueued text (speed, tone, volume, gap) behave
corresponding to a value modified through the Function keys.

*Actual results*
Pass. The parameters of the played text behave correctly, correspondingly to
values of options.

***** DONE Practice time keys (PageDown/PageUp keys)

*Steps*
1. Using PageDown/PageUp keys select some value of practice time.
2. In "Mode" menu select any of character groups.
3. Let cwcp generate sound.

*Expected results*
1. The timer at the bottom of the UI counts practice time up.
2. When the count of minutes of practice time reaches limit set with
   PageDown/PageUp keys, the practice ends.

*Actual results*
Pass. The keys increase/decrease limit of practice time. Practice ends when
the time is up.

***** DONE "Exit" key

*Steps*
1. Press F12 ("Exit") key when cwcp is idle and is not generating any text/sound.
2. Press F12 ("Exit") key when cwcp is generating text and sound.

*Expected results*
1. cwcp process is terminated.
2. No "ncurses" artifacts are visible in console window, meaning that the
   termination was "clean".
3. No error or warning messages are visible in console window

*Actual results*
Pass. Program ends as epxected.

*** SKIPPED xcwcp tests

Skipped. I don't compile xcwcp on this platform.

**** TODO Tests of UI elements
***** TODO Main modes (character groups)

*Steps*
1. Select each mode (character group) item in "Modes" dropdown menu.
2. Press Play button if necessary to force start of playing.

*Expected results*
1. For each item the text in main UI area corresponds to each mode (character
   group). The words consist of intended (expected) characters from character group.
2. For each item the text is being played correctly.

*Actual results*

***** TODO "Keyboard" mode

*Steps*
1. In the "Modes" dropdown select "Send Keyboard CW" item.
2. Enter few words.
3. Press Play button if necessary to force start of playing.

*Expected results*
1. The entered words are visible in main UI area.
2. The words are played correctly.

*Actual results*

***** TODO "Receiver" mode
*Steps*
1. In the "Modes" dropdown select "Receive Keyed CW" item.
2. Use mouse or keyboard to simulate Morse key:
   a. Use mouse Left/Right button to simulate iambic keyer.
   b. Use keyboard Left/Right key to simulate iambic keyer.
   c. Use keyboard Space key to simulate straight key.
   d. Use keyboard Enter key to simulate straight key.

*Expected results*
For each method of simulating a key, the tested program is able to recognize
keyed characters.

*Actual results*

***** TODO Main sound controls

*Steps*
1. In program's "Modes" dropdown select any of character groups.
2. Let xcwcp generate sound.
3. Use the spin boxes available in program's toolbar to control parameters of played
   sound (speed, tone, volume, gap)..

*Expected results*
Parameters of newly enqueued text (speed, tone, volume, gap) behave
corresponding to a value modified through the spin boxes.

*Actual results*

*** DONE cwgen tests
Tests of basic usage of unixcw/src/cwgen/cwgen program.

**** DONE Manual tests of cwgen

A significant part of cwgen's functionality is tested automatically through
code in 'src/cwgen/tests' subdirectory. This means that the manual tests
described here are only meant as a double-check that the automatic tests
didn't miss any grave problems.

The test steps mention "visual inspection". This means: look at cwgen's
output, see if it more or less matches command line options passed to cwgen,
and move on to next step.

*Steps*

1. Visually inspect count of groups (words) in output of
   ./src/cwgen/cwgen -g 9

2. Visually inspect size of groups (words) in output of
   ./src/cwgen/cwgen --groupsize 3

3. Visually inspect size of groups (words) in output of
   ./src/cwgen/cwgen --groupsize 2-7

4. Visually inspect count of repeats, i.e. number of times a given word has
   been *additionally* printed after first printing of a word:
   ./src/cwgen/cwgen -r 2

5. Visually inspect characters used in groups (words) in output of
   ./src/cwgen/cwgen --charset "aBc0"

6. Visually inspect count of characters in output of
   ./src/cwgen/cwgen --limit 12

7. Visually inspect cwgen's help text in output of
   ./src/cwgen/cwgen -h

8. Visually inspect copyright notice in output of
   ./src/cwgen/cwgen -v


*Expected results*

In each of the above steps, the text printed to console matches the command
line options passed to cwgen.

*Actual results*
Pass. In all cases the output of cwgen matched expectations set by command
line options.

**** DONE Automatic tests of cwgen

Automatic tests are executed on every "make check", which happens a lot
during development. This test from this test scenario is meant to
manually/visually check the output of the tests.

*Steps*
1. Compile automatic tests with this command:
   ./configure && make && make check
2. Execute manually the binary responsible for automatic tests of cwgen.
   ./src/cwgen/tests/cwgen_args

   a. Run the binary 5 times.
   b. Each time check whether the binary didn't report errors.
   c. Each time look at debug showing argv, i.e. the list of cwgen's command
      line options. Compare the output of tests with the list of the options.


*Expected results*
1. The test binary doesn't report errors (warnings are allowed).
2. Debugs generated by the test binary match the list of cwgen's command line
   options.

*Actual results*
Pass. No reported errors. Visual inspection found no issues.

*** SKIPPED receiving functionality
**** SKIPPED xcwcp receiver tests

*Steps*
1. Enable xcwcp's receiver tests
  ./configure --enable-dev-receiver-test
2. Compile xcwcp
   make
3. Run xcwcp, use "Run Receiver Test" item in modes menu
   Observe console during and after execution of the test.
4. At the end of received text press "pause" button to end the test.
5. Check in console that the summary says "success":
   "[II] Test result: success"

*Expected results*
1. No errors reported in console.
2. Test's summary indicates success.

*Actual results*
Skipped. I don't compile xcwcp on this platform.

** STARTED FreeBSD 13.2-RELEASE-p4 (Celeron, x86_64)
gcc (FreeBSD Ports Collection) 12.2.0
*** STARTED Build system tests
**** DONE make distcheck

*Steps*
Run "./configure && make distcheck" in main directory of the project.

*Expected result*
1. Distribution package is built correctly (no errors during creation of
   archive).
2. Automatic tests executed during 'make distcheck' pass.
3. The distribution package contains all files intended for distribution (use
   your best judgement here).

*Actual result*
Pass. The distribution package is created correctly.

**** TODO ./configure options

Test that all options supported by ./configure script produce "buildable" code.

*Steps*
Run ./qa/test_configure_options.sh

*Expected result*

The script should not report any failure.

Example of failed test:

$ qa/test_configure_options.sh
128: ./configure --enable-dev --disable-xcwcp --disable-cwcp --disable-pulseaudio --disable-alsa --disable-oss --disable-console &>/dev/null && make &>/dev/null && make check &>/dev/null && make clean &>/dev/null
Test of configuration flags FAILED
$ echo $?
255

Example of successful test:

$ qa/test_configure_options.sh
128: ./configure --enable-dev --disable-xcwcp --disable-cwcp --disable-pulseaudio --disable-alsa --disable-oss --disable-console &>/dev/null && make &>/dev/null && make check &>/dev/null && make clean &>/dev/null
127: ./configure --enable-dev --disable-xcwcp --disable-cwcp --disable-pulseaudio --disable-alsa --disable-oss &>/dev/null && make &>/dev/null && make check &>/dev/null && make clean &>/dev/null
126: ./configure --enable-dev --disable-xcwcp --disable-cwcp --disable-pulseaudio --disable-alsa --disable-console &>/dev/null && make &>/dev/null && make check &>/dev/null && make clean &>/dev/null
[...]
3: ./configure --disable-oss &>/dev/null && make &>/dev/null && make check &>/dev/null && make clean &>/dev/null
2: ./configure --disable-console &>/dev/null && make &>/dev/null && make check &>/dev/null && make clean &>/dev/null
1: ./configure &>/dev/null && make &>/dev/null && make check &>/dev/null && make clean &>/dev/null
Test of configuration flags SUCCEEDED

*Notes*
The shell script may not work on systems without bash.

*Actual result*

*** DONE libcw tests
Tests using tools from unixcw/src/libcw.

Notice that Null sound system is tested as last one: first run tests on other
sound systems that allow you to hear some sound. With a real sound from
speaker or buzzer it's easier to notice problems with libcw. Don't waste time
on testing Null system first, only to hear issues with other sound systems
later.

**** SKIPPED Main test binary - Console sound system

*Steps*
./configure
make
make check
cd src/libcw/tests
./libcw_tests -S c

*Expected results*
Test logs and summary table for tests shows only well-known problems.

*Test statistics table*

*Actual result*

Skipped due to console sound system not functioning (not implemented
correctly) on FreeBSD.

There is a note/ticket added to README.dev.org about this problem.

**** DONE Main test binary - OSS sound system

*Preconditions*

On Linux machine, you may need to disable PulseAudio and/or PipeWire sound
server before being able to access OSS directly. Refer to instructions in
project's README.dev.org for details on how to stop these sound servers.

*Steps*

./configure
make
make check
cd src/libcw/tests
./libcw_tests -S o

*Expected results*
Test logs and summary table for tests shows only well-known problems.

*Test statistics table*

libcw tests: Statistics of tests (failures/total)

     | tone queue| generator |    key    |  receiver |    data   |    other  |
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   N |           |           |           |           |           |           |  
   N |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   C |           |           |           |           |           |           |  
   C |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
-> O |         2 |        40 |         0 |         0 |         0 |         0 |<-
   O |       152 |       999 |        48 |      1426 |        30 |       431 |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   A |           |           |           |           |           |           |  
   A |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   P |           |           |           |           |           |           |  
   P |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+

Failed functions:

test_cw_gen_state_callback: usual problems with calling a callback on changes
of state of generator.

test_cw_gen_enqueue_character_no_ics: the same situation as with ALSA on Alpine:
the removal of characters works correctly - it's the receiver part (used in
verification of played sounds) that is failing.

test_cw_gen_remove_last_character: the same situation as with ALSA on Alpine:
the removal of characters works correctly - it's the receiver part (used in
verification of played sounds) that is failing.

test_cw_tq_wait_for_level_internal: this is probably a problem known since at
least 3.6.0: in 3.6.0 there were two errors in "tone queue" category.

*Actual result*
Pass. It looks like the problems reported in tests are known problems.
Relevant tickets have been added or updated in README.dev.org.

**** SKIPPED Main test binary - ALSA sound system

*Preconditions*

On Linux machine, you may need to disable PulseAudio and/or PipeWire sound
server before being able to access ALSA directly. Refer to instructions in
project's README.dev.org for details on how to stop these sound servers.

*Steps*

./configure
make
make check
cd src/libcw/tests
./libcw_tests -S a

*Expected results*
Test logs and summary table for tests shows only well-known problems.

*Test statistics table*

*Actual result*
Skipped. ALSA is not supported on this platform.

**** SKIPPED Main test binary - PulseAudio sound system

*Steps*

./configure
make
make check
cd src/libcw/tests
./libcw_tests -S p

*Expected results*
Test logs and summary table for tests shows only well-known problems.

*Test statistics table*

*Actual result*
Skipped. PulseAudio is not supported on this platform.

**** DONE Main test binary - Null sound system

*Steps*

./configure
make
make check
cd src/libcw/tests
./libcw_tests -S n

*Expected results*

Test logs and summary table for tests shows only well-known problems.

*Test statistics table*
     | tone queue| generator |    key    |  receiver |    data   |    other  |
   --+-----------+-----------+-----------+-----------+-----------+-----------+
-> N |         0 |        79 |         0 |         0 |         0 |         0 |<-
   N |       151 |       999 |        48 |      1426 |        30 |       431 |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   C |           |           |           |           |           |           |  
   C |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   O |           |           |           |           |           |           |  
   O |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   A |           |           |           |           |           |           |  
   A |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+
   P |           |           |           |           |           |           |  
   P |           |           |           |           |           |           |  
   --+-----------+-----------+-----------+-----------+-----------+-----------+

Failed tests:

test_cw_gen_state_callback - big divergences

test_cw_gen_enqueue_character_no_ics - incorrect recognition of first element

*Actual result*
Pass. Tests fail in known places.

**** DONE Misc tests

***** DONE pcm sample file is disabled in regular builds

Confirm that by default libcw doesn't create a debug file into which raw PCM
samples are being written.

*Steps*

1. Confirm that in /tmp there is no file called
   "cw_file_<parameters>_pcm.raw" from previous runs of programs/tests.

2. Build package
./configure && make

3. Start a program that uses libcw to generate sound. Play any string.
./src/cw/cw

4. Exit the program.

5. Confirm that in /tmp there is no file called
   "cw_file_<parameters>_pcm.raw" from _current_ run of program done in
   step 3.

*Actual result*
Pass. No sample files in /tmp.

*** TODO cw tests
Tests of basic usage of unixcw/src/cw/cw program.

**** TODO Tests using *.cw files

Tests that use *.cw files:
./src/cw/cw -f src/cw/test.cw           #  4 min 58 sec
./src/cw/cw -f src/cw/demo.cw           #  9 min 54 sec
./src/cw/cw -f src/cw/prelude.cw        #  1 min 54 sec

*Actual result*

**** TODO Tests of command-line options
Test that some of command-line options result in expected behaviour of cw.

***** TODO basic options through script

*Prerequisites*
1. Adjust parameters of ./src/cw/tests/basic_options.sh as needed on given
   platform, e.g. change value of $DEVICE.

*Steps*
1. Run script: ./src/cw/tests/basic_options.sh
2. Obseve text info informing about tested options, listen to played sounds,
3. Confirm that sound's parameters (volume, gap, tone, etc.) matches the info
   printed by the script.
4. Observe whether entire text (especially its beginning and end) is played
   correctly.

*Actual result*

***** TODO Null sound system

./srcw/cw/cw -s n

*Actual result*

***** TODO ALSA sound system

You may want to first kill pulseaudio and pipewire

./src/cw/cw -s a -d plughw:CARD=PCH,DEV=0

*Actual result*

***** TODO OSS sound system

You may want to first kill pulseaudio and pipewire

./src/cw/cw -s o

*Actual result*

**** TODO basic behaviour in a "session"

One of previous tests ("through script") has been passing text to cw through
unix pipe. If I remember correctly, such setup may behave a bit differently
than a setup in which a text is entered through keyboard in a started cw
program (started cw program waits for input from user, so called "session").

In one of such setups, in some circumstances, the initial part of text was
not played correctly.

In order to verify behaviour of cw in a "session", run this test.

TODO acerion 2023.11.10: check what was the problem and in which specific
circumstances it occurred.

*Steps*
1. Start cw: ./src/cw/cw
2. Enter any text
3. Observe whether entire text (especially its beginning and end) is played
   correctly

*Actual result*

*** TODO cwcp tests
Tests of basic usage of unixcw/src/cwcp/cwcp program.

**** TODO Tests of UI elements
***** TODO Main modes (character groups)

*Steps*
1. Select each mode (character group) item in left-hand "Modes" panel.
2. Press F9 or Enter if necessary to force start of playing.

*Expected results*
1. For each item the text in main UI area corresponds to each mode (character
   group). The words consist of intended (expected) characters from character group.
2. For each item the text is being played correctly.

*Actual results*

***** TODO "Keyboard" mode

*Steps*
1. In the left-hand "Modes" panel select "Keyboard" item.
2. Enter few words

*Expected results*
1. The entered words are visible in main UI area.
2. The words are played correctly.

*Actual results*

***** TODO Main Function-key controls

*Steps*
1. In "Mode" menu select any of character groups.
2. Let cwcp generate sound.
3. Use the function keys in range F1-F8 to control parameters of played
   sound.

*Expected results*
Parameters of newly enqueued text (speed, tone, volume, gap) behave
corresponding to a value modified through the Function keys.

*Actual results*

***** TODO Practice time keys (PageDown/PageUp keys)

*Steps*
1. Using PageDown/PageUp keys select some value of practice time.
2. In "Mode" menu select any of character groups.
3. Let cwcp generate sound.

*Expected results*
1. The timer at the bottom of the UI counts practice time up.
2. When the count of minutes of practice time reaches limit set with
   PageDown/PageUp keys, the practice ends.

*Actual results*

***** TODO "Exit" key

*Steps*
1. Press F12 ("Exit") key when cwcp is idle and is not generating any text/sound.
2. Press F12 ("Exit") key when cwcp is generating text and sound.

*Expected results*
1. cwcp process is terminated.
2. No "ncurses" artifacts are visible in console window, meaning that the
   termination was "clean".
3. No error or warning messages are visible in console window

*Actual results*

*** TODO xcwcp tests
**** TODO Tests of UI elements
***** TODO Main modes (character groups)

*Steps*
1. Select each mode (character group) item in "Modes" dropdown menu.
2. Press Play button if necessary to force start of playing.

*Expected results*
1. For each item the text in main UI area corresponds to each mode (character
   group). The words consist of intended (expected) characters from character group.
2. For each item the text is being played correctly.

*Actual results*

***** TODO "Keyboard" mode

*Steps*
1. In the "Modes" dropdown select "Send Keyboard CW" item.
2. Enter few words.
3. Press Play button if necessary to force start of playing.

*Expected results*
1. The entered words are visible in main UI area.
2. The words are played correctly.

*Actual results*

***** TODO "Receiver" mode
*Steps*
1. In the "Modes" dropdown select "Receive Keyed CW" item.
2. Use mouse or keyboard to simulate Morse key:
   a. Use mouse Left/Right button to simulate iambic keyer.
   b. Use keyboard Left/Right key to simulate iambic keyer.
   c. Use keyboard Space key to simulate straight key.
   d. Use keyboard Enter key to simulate straight key.

*Expected results*
For each method of simulating a key, the tested program is able to recognize
keyed characters.

*Actual results*

***** TODO Main sound controls

*Steps*
1. In program's "Modes" dropdown select any of character groups.
2. Let xcwcp generate sound.
3. Use the spin boxes available in program's toolbar to control parameters of played
   sound (speed, tone, volume, gap)..

*Expected results*
Parameters of newly enqueued text (speed, tone, volume, gap) behave
corresponding to a value modified through the spin boxes.

*Actual results*

*** TODO cwgen tests
Tests of basic usage of unixcw/src/cwgen/cwgen program.

**** TODO Manual tests of cwgen

A significant part of cwgen's functionality is tested automatically through
code in 'src/cwgen/tests' subdirectory. This means that the manual tests
described here are only meant as a double-check that the automatic tests
didn't miss any grave problems.

The test steps mention "visual inspection". This means: look at cwgen's
output, see if it more or less matches command line options passed to cwgen,
and move on to next step.

*Steps*

1. Visually inspect count of groups (words) in output of
   ./src/cwgen/cwgen -g 9

2. Visually inspect size of groups (words) in output of
   ./src/cwgen/cwgen --groupsize 3

3. Visually inspect size of groups (words) in output of
   ./src/cwgen/cwgen --groupsize 2-7

4. Visually inspect count of repeats, i.e. number of times a given word has
   been *additionally* printed after first printing of a word:
   ./src/cwgen/cwgen -r 2

5. Visually inspect characters used in groups (words) in output of
   ./src/cwgen/cwgen --charset "aBc0"

6. Visually inspect count of characters in output of
   ./src/cwgen/cwgen --limit 12

7. Visually inspect cwgen's help text in output of
   ./src/cwgen/cwgen -h

8. Visually inspect copyright notice in output of
   ./src/cwgen/cwgen -v


*Expected results*

In each of the above steps, the text printed to console matches the command
line options passed to cwgen.

*Actual results*

**** TODO Automatic tests of cwgen

Automatic tests are executed on every "make check", which happens a lot
during development. This test from this test scenario is meant to
manually/visually check the output of the tests.

*Steps*
1. Compile automatic tests with this command:
   ./configure && make && make check
2. Execute manually the binary responsible for automatic tests of cwgen.
   ./src/cwgen/tests/cwgen_args

   a. Run the binary 5 times.
   b. Each time check whether the binary didn't report errors.
   c. Each time look at debug showing argv, i.e. the list of cwgen's command
      line options. Compare the output of tests with the list of the options.


*Expected results*
1. The test binary doesn't report errors (warnings are allowed).
2. Debugs generated by the test binary match the list of cwgen's command line
   options.

*Actual results*

*** TODO receiving functionality
**** TODO xcwcp receiver tests

*Steps*
1. Enable xcwcp's receiver tests
  ./configure --enable-dev-receiver-test
2. Compile xcwcp
   make
3. Run xcwcp, use "Run Receiver Test" item in modes menu
   Observe console during and after execution of the test.
4. At the end of received text press "pause" button to end the test.
5. Check in console that the summary says "success":
   "[II] Test result: success"

*Expected results*
1. No errors reported in console.
2. Test's summary indicates success.

*Actual results*

